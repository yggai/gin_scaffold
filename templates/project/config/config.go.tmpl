package config

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

// Config 应用程序配置
type Config struct {
	Server   ServerConfig   `json:"server"`
	Database DatabaseConfig `json:"database"`
}

// ServerConfig 服务器配置
type ServerConfig struct {
	Port int `json:"port"`
}

// DatabaseConfig 数据库配置
type DatabaseConfig struct {
	Driver   string `json:"driver"`
	Host     string `json:"host"`
	Port     int    `json:"port"`
	Name     string `json:"name"`
	User     string `json:"user"`
	Password string `json:"password"`
}

// GetDSN 获取数据库连接字符串
func (c DatabaseConfig) GetDSN() string {
	switch strings.ToLower(c.Driver) {
	case "mysql":
		return fmt.Sprintf("%s:%s@tcp(%s:%d)/%s?charset=utf8mb4&parseTime=True&loc=Local",
			c.User, c.Password, c.Host, c.Port, c.Name)
	case "postgres":
		return fmt.Sprintf("host=%s port=%d user=%s dbname=%s password=%s sslmode=disable",
			c.Host, c.Port, c.User, c.Name, c.Password)
	default:
		return ""
	}
}

// DefaultConfig 返回默认配置
func DefaultConfig() Config {
	return Config{
		Server: ServerConfig{
			Port: 8080,
		},
		Database: DatabaseConfig{
			Driver:   "mysql",
			Host:     "localhost",
			Port:     3306,
			Name:     "{{.AppName}}_db",
			User:     "root",
			Password: "",
		},
	}
}

// Load 加载配置
func Load() (Config, error) {
	config := DefaultConfig()

	// 检查配置文件是否存在
	configPath := getConfigPath()
	if _, err := os.Stat(configPath); os.IsNotExist(err) {
		// 如果配置文件不存在，创建默认配置文件
		if err := saveConfig(configPath, config); err != nil {
			return config, fmt.Errorf("无法创建默认配置文件: %v", err)
		}
		return config, nil
	}

	// 读取配置文件
	data, err := os.ReadFile(configPath)
	if err != nil {
		return config, fmt.Errorf("无法读取配置文件: %v", err)
	}

	// 解析配置
	if err := json.Unmarshal(data, &config); err != nil {
		return config, fmt.Errorf("无法解析配置文件: %v", err)
	}

	return config, nil
}

// 获取配置文件路径
func getConfigPath() string {
	// 首先检查当前目录
	configPath := "config.json"
	if _, err := os.Stat(configPath); !os.IsNotExist(err) {
		return configPath
	}

	// 然后检查config目录
	configPath = filepath.Join("config", "config.json")
	if _, err := os.Stat(configPath); !os.IsNotExist(err) {
		return configPath
	}

	// 默认使用当前目录
	return "config.json"
}

// 保存配置到文件
func saveConfig(path string, config Config) error {
	data, err := json.MarshalIndent(config, "", "  ")
	if err != nil {
		return err
	}
	
	// 确保目录存在
	dir := filepath.Dir(path)
	if err := os.MkdirAll(dir, 0755); err != nil {
		return err
	}

	return os.WriteFile(path, data, 0644)
} 